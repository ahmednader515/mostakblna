// prisma/schema.prisma
datasource db {
  provider  = "mysql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      String    @id @default(uuid())
  fullName                String
  phoneNumber             String    @unique
  parentPhoneNumber       String
  hashedPassword          String?
  image                   String?
  role                    String    @default("USER")
  balance                 Float     @default(0)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  courses                 Course[]
  purchases               Purchase[]
  userProgress            UserProgress[]
  balanceTransactions     BalanceTransaction[]
  quizResults             QuizResult[]
}

model Course {
  id String @id @default(uuid())
  userId String
  title String @db.Text
  description String? @db.Text
  imageUrl String? @db.Text
  price Float?
  isPublished Boolean @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  attachments Attachment[]
  chapters Chapter[]
  purchases Purchase[]
  quizzes Quiz[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attachment {
  id String @id @default(uuid())
  name String
  url String @db.Text

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id String @id @default(uuid())
  title String @db.Text
  description String? @db.Text
  videoUrl String? @db.Text
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)
  muxUploadId String?

  muxData MuxData?

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model MuxData {
  id String @id @default(uuid())
  assetId String
  playbackId String?
  uploadId String?

  chapterId String @unique
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
    id        String   @id @default(uuid())
    userId    String
    chapterId String
    isCompleted Boolean @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    chapter   Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)

    @@unique([userId, chapterId])
    @@index([chapterId])
}

model Purchase {
    id String @id @default(uuid())
    userId String
    courseId String
    status String @default("ACTIVE")
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([userId, courseId])
    @@index([courseId])
}

model BalanceTransaction {
    id String @id @default(uuid())
    userId String
    amount Float
    type String // "DEPOSIT" or "PURCHASE"
    description String
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
}

model Quiz {
    id String @id @default(uuid())
    title String
    description String? @db.Text
    position Int
    isPublished Boolean @default(false)
    timer Int? // Timer in minutes, null means no time limit
    maxAttempts Int @default(1) // Maximum number of attempts allowed
    courseId String
    course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
    questions Question[]
    quizResults QuizResult[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([courseId])
}

model Question {
    id String @id @default(uuid())
    text String @db.Text
    type String // "MULTIPLE_CHOICE", "TRUE_FALSE", "SHORT_ANSWER"
    options String? @db.Text // JSON string for multiple choice options
    correctAnswer String @db.Text
    points Int @default(1)
    imageUrl String? @db.Text
    position Int @default(1)
    quizId String
    quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
    answers QuizAnswer[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([quizId])
}

model QuizResult {
    id String @id @default(uuid())
    studentId String
    quizId String
    score Int
    totalPoints Int
    percentage Float
    attemptNumber Int @default(1) // Track which attempt this is
    submittedAt DateTime @default(now())
    user User @relation(fields: [studentId], references: [id], onDelete: Cascade)
    quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
    answers QuizAnswer[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([studentId, quizId])
    @@index([quizId])
}

model QuizAnswer {
    id String @id @default(uuid())
    questionId String
    quizResultId String
    studentAnswer String @db.Text
    correctAnswer String @db.Text
    isCorrect Boolean
    pointsEarned Int
    question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
    quizResult QuizResult @relation(fields: [quizResultId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([questionId])
    @@index([quizResultId])
}